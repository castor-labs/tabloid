<?php

declare(strict_types=1);

/**
 * @project Ekklesion
 * @link https://github.com/castor-labs/ekklesion
 * @package castor/ekklesion
 * @author Matias Navarro-Carter mnavarrocarter@gmail.com
 * @license MIT
 * @copyright 2021 CastorLabs Ltd
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Castor\Tabloid;

use Castor\Tabloid\Metadata\Attr\Table;
use Castor\Tabloid\Metadata\Field;
use Castor\Tabloid\SQL\Type;
use Closure;
use ReflectionClass;
use RuntimeException;

/**
 * Metadata is just a class that holds data on how to map a particular class
 * to the database and the other way around.
 */
class Metadata
{
    private ReflectionClass $class;
    private Table $table;
    /**
     * @var array<int,Field>
     */
    private array $fields;
    /**
     * @var array<int,Field>
     */
    private array $idFields;
    /**
     * @var array<string,int>
     */
    private array $propertyIndex;

    private bool $autogeneratedId;

    public function __construct(ReflectionClass $class, Table $table)
    {
        $this->class = $class;
        $this->table = $table;
        $this->fields = [];
        $this->idFields = [];
        $this->propertyIndex = [];
        $this->autogeneratedId = false;
    }

    public function addField(Field $field): void
    {
        if ($field->getColumn()->isPrimaryKey() && $field->getColumn()->isAutogenerated()) {
            $this->autogeneratedId = true;
        }

        $this->fields[] = $field;
        if ($field->getColumn()->isPrimaryKey()) {
            $this->idFields[] = $field;
        }
        $this->propertyIndex[$field->getName()] = count($this->fields) - 1;
    }

    /**
     * @return Field[]
     */
    public function getFields(): array
    {
        return $this->fields;
    }

    /**
     * @param string $name
     * @return Field
     */
    public function getFieldForProperty(string $name): Field
    {
        $i = $this->propertyIndex[$name] ?? -1;
        $field = $this->fields[$i] ?? null;
        if ($field === null) {
            throw new RuntimeException(sprintf('Property %s does not exist in entity %s', $name, $this->class->getName()));
        }
        return $field;
    }

    /**
     * @return ReflectionClass
     */
    public function getClass(): ReflectionClass
    {
        return $this->class;
    }

    /**
     * @return Table
     */
    public function getTable(): Table
    {
        return $this->table;
    }

    /**
     * @return Field[]
     */
    public function getIdFields(): array
    {
        return $this->idFields;
    }

    /**
     * @return bool
     */
    public function hasAutogeneratedId(): bool
    {
        return $this->autogeneratedId;
    }
}
