<?php

declare(strict_types=1);

/**
 * @project Ekklesion
 * @link https://github.com/castor-labs/ekklesion
 * @package castor/ekklesion
 * @author Matias Navarro-Carter mnavarrocarter@gmail.com
 * @license MIT
 * @copyright 2021 CastorLabs Ltd
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Castor\Tabloid\Metadata\Attr;

use Attribute;
use Castor\Tabloid\SQL\Type\RawType;

#[Attribute(Attribute::TARGET_PROPERTY)]
class Column
{
    public const NULLABLE = 1;
    public const PRIMARY_KEY = 2;
    public const AUTOGENERATED = 4;

    private string $type;
    private string $name;
    private int $flags;

    /**
     * @param string $type What is the type of the field
     * @param string $name The name of the column in the database
     * @param int $flags
     */
    public function __construct(
        string $type = RawType::class,
        int $flags = 0,
        string $name = '',
    ) {
        $this->type = $type;
        $this->name = $name;
        $this->flags = $flags;
    }

    public function getType(): string
    {
        return $this->type;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function isNullable(): bool
    {
        return $this->hasFlag(self::NULLABLE);
    }

    /**
     * @return bool
     */
    public function isAutogenerated(): bool
    {
        return $this->hasFlag(self::AUTOGENERATED);
    }

    /**
     * @return bool
     */
    public function isPrimaryKey(): bool
    {
        return $this->hasFlag(self::PRIMARY_KEY);
    }

    private function hasFlag(int $flag): bool
    {
        return ($this->flags & $flag) !== 0;
    }
}
